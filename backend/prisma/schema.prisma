// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// LIST ENUM
enum Role {
  USER
  STAFF
  ADMIN
}

enum KategoriBuku {
  FIKSI
  NON_FIKSI
  SAINS
  TEKNOLOGI
  SEJARAH
  SASTRA
  KOMIK
  LAINNYA
}

enum Status {
  PENDING
  APPROVED
  RETURNED
  OVERDUE
}

enum TipeNotifikasi {
  DUE_REMINDER
  OVERDUE_NOTICE
  DENDA_NOTICE
}

// MIGRASI
model User {
  id        Int      @id @default(autoincrement())
  name      String
  username  String   @unique
  email     String   @unique
  password  String
  role      Role
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // RELASI
  peminjaman        Peminjaman[] @relation("PeminjamanUser") // user yang meminjam buku
  handledPeminjaman Peminjaman[] @relation("StaffHandled") // staff yang menangani peminjaman
  bookmarks         Bookmark[]
  suka              Suka[]
  rating            Rating[]
  notifikasi        Notifikasi[]

  @@index([role])
}

model Buku {
  id          Int          @id @default(autoincrement())
  title       String
  penulis     String
  isbn        String?      @unique
  kategori    KategoriBuku
  deskripsi   String?      @db.Text
  coverImg    String?
  stock       Int          @default(0)
  dendaHarian Decimal      @default(0) @db.Decimal(10, 2)
  penerbit    String?
  tahunTerbit Int?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // RELASI
  peminjaman Peminjaman[]
  bookmark   Bookmark[]
  suka       Suka[]
  rating     Rating[]

  @@index([kategori])
  @@index([createdAt])
}

model Peminjaman {
  id              Int       @id @default(autoincrement())
  UserId          Int
  bukuId          Int
  staffId         Int?
  tglPinjam       DateTime  @default(now())
  tglKembali      DateTime // tanggal saat harus dikembalikan 
  tglDikembalikan DateTime? // tanggal user mengembalikan (bisa telat)
  status          Status    @default(PENDING)
  jumlahDenda     Decimal   @default(0) @db.Decimal(10, 2)
  isDendaDibayar  Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // RELASI
  user  User  @relation("PeminjamanUser", fields: [UserId], references: [id])
  buku  Buku  @relation(fields: [bukuId], references: [id])
  staff User? @relation("StaffHandled", fields: [staffId], references: [id])
  notifikasi Notifikasi[]

  @@index([status])
  @@index([tglKembali])
}

model Bookmark {
  id        Int      @id @default(autoincrement())
  userId    Int
  bukuId    Int
  createdAt DateTime @default(now())

  // RELASI
  user User @relation(fields: [userId], references: [id])
  buku Buku @relation(fields: [bukuId], references: [id])

  @@unique([userId, bukuId])
}

model Suka {
  id        Int      @id @default(autoincrement())
  userId    Int
  bukuId    Int
  createdAt DateTime @default(now())

  // RELASI
  user User @relation(fields: [userId], references: [id])
  buku Buku @relation(fields: [bukuId], references: [id])

  @@unique([userId, bukuId])
}

model Rating {
  id        Int      @id @default(autoincrement())
  userId    Int
  bukuId    Int
  rating    Decimal  @db.Decimal(2, 1)
  komentar  String?  @db.Text
  photoUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // RELASI
  user User @relation(fields: [userId], references: [id])
  buku Buku @relation(fields: [bukuId], references: [id])

  @@unique([userId, bukuId])
}

model Notifikasi {
  id Int @id @default(autoincrement())
  userId Int
  peminjamanId Int
  message String @db.Text
  tipe TipeNotifikasi
  isRead Boolean @default(false)
  createdAt DateTime @default(now())

  // RELASI
  user User @relation(fields: [userId], references: [id])
  peminjaman Peminjaman @relation(fields: [peminjamanId], references: [id])

  @@index([userId])
  @@index([tipe])
}
